
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Mar 21 15:12:27 EDT 2015
//----------------------------------------------------

import java.io.*;

/** CUP v0.10k generated parser.
  * @version Sat Mar 21 15:12:27 EDT 2015
  */
public class A4Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public A4Parser() {super();}

  /** Constructor which sets the default scanner. */
  public A4Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\003\003\000\002\002\004\000\002\010" +
    "\003\000\002\010\004\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\011\003\000\002\011\003\000" +
    "\002\012\010\000\002\030\010\000\002\032\002\000\002" +
    "\032\003\000\002\015\003\000\002\015\005\000\002\013" +
    "\004\000\002\014\003\000\002\014\003\000\002\016\005" +
    "\000\002\005\003\000\002\005\004\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\017\005\000\002\017" +
    "\004\000\002\020\006\000\002\020\006\000\002\025\003" +
    "\000\002\025\005\000\002\007\003\000\002\007\005\000" +
    "\002\026\003\000\002\026\003\000\002\026\005\000\002" +
    "\026\006\000\002\033\002\000\002\033\003\000\002\031" +
    "\003\000\002\031\005\000\002\021\005\000\002\024\011" +
    "\000\002\023\011\000\002\022\007\000\002\022\011\000" +
    "\002\027\005\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\010\014\005\015\013\031\011\001\002\000" +
    "\006\013\020\027\017\001\002\000\006\013\ufffd\027\ufffd" +
    "\001\002\000\012\002\001\014\005\015\013\031\011\001" +
    "\002\000\012\002\ufffa\014\ufffa\015\ufffa\031\ufffa\001\002" +
    "\000\012\002\uffff\014\uffff\015\uffff\031\uffff\001\002\000" +
    "\006\013\ufffb\027\ufffb\001\002\000\012\002\ufff9\014\ufff9" +
    "\015\ufff9\031\ufff9\001\002\000\006\013\ufffc\027\ufffc\001" +
    "\002\000\004\002\015\001\002\000\004\002\000\001\002" +
    "\000\012\002\ufffe\014\ufffe\015\ufffe\031\ufffe\001\002\000" +
    "\004\023\133\001\002\000\004\027\021\001\002\000\004" +
    "\023\022\001\002\000\004\022\023\001\002\000\004\011" +
    "\025\001\002\000\012\002\ufff7\014\ufff7\015\ufff7\031\ufff7" +
    "\001\002\000\022\004\041\005\042\006\034\010\043\014" +
    "\005\015\013\027\037\031\011\001\002\000\026\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\010\uffec\012\uffec\014\uffec\015" +
    "\uffec\027\uffec\031\uffec\001\002\000\004\027\130\001\002" +
    "\000\026\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\012" +
    "\uffea\014\uffea\015\uffea\027\uffea\031\uffea\001\002\000\026" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\012\uffe7\014" +
    "\uffe7\015\uffe7\027\uffe7\031\uffe7\001\002\000\026\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb\014\uffeb\015" +
    "\uffeb\027\uffeb\031\uffeb\001\002\000\024\004\041\005\042" +
    "\006\034\010\043\012\127\014\005\015\013\027\037\031" +
    "\011\001\002\000\004\023\111\001\002\000\024\004\uffee" +
    "\005\uffee\006\uffee\010\uffee\012\uffee\014\uffee\015\uffee\027" +
    "\uffee\031\uffee\001\002\000\026\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\012\uffe8\014\uffe8\015\uffe8\027\uffe8\031" +
    "\uffe8\001\002\000\004\026\104\001\002\000\026\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\010\uffe9\012\uffe9\014\uffe9\015" +
    "\uffe9\027\uffe9\031\uffe9\001\002\000\004\023\076\001\002" +
    "\000\004\023\070\001\002\000\010\023\050\027\044\030" +
    "\047\001\002\000\022\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\061\024\uffdd\025\uffdd\001\002\000\014\016" +
    "\uffe2\017\uffe2\020\uffe2\021\056\022\uffe2\001\002\000\006" +
    "\017\060\020\054\001\002\000\020\016\uffde\017\uffde\020" +
    "\uffde\021\uffde\022\uffde\024\uffde\025\uffde\001\002\000\010" +
    "\023\050\027\044\030\047\001\002\000\014\016\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\001\002\000\006\020\054" +
    "\022\053\001\002\000\020\016\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\024\uffdc\025\uffdc\001\002\000\010\023\050" +
    "\027\044\030\047\001\002\000\014\016\uffe1\017\uffe1\020" +
    "\uffe1\021\056\022\uffe1\001\002\000\010\023\050\027\044" +
    "\030\047\001\002\000\014\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\001\002\000\026\004\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\012\uffd6\014\uffd6\015\uffd6\027\uffd6\031" +
    "\uffd6\001\002\000\012\022\uffda\023\050\027\044\030\047" +
    "\001\002\000\004\022\067\001\002\000\006\016\065\022" +
    "\uffd8\001\002\000\004\022\uffd9\001\002\000\010\023\050" +
    "\027\044\030\047\001\002\000\004\022\uffd7\001\002\000" +
    "\020\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\024\uffdb" +
    "\025\uffdb\001\002\000\004\027\071\001\002\000\004\016" +
    "\072\001\002\000\004\032\073\001\002\000\004\022\074" +
    "\001\002\000\004\017\075\001\002\000\026\004\uffd5\005" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\012\uffd5\014\uffd5\015\uffd5" +
    "\027\uffd5\031\uffd5\001\002\000\010\023\050\027\044\030" +
    "\047\001\002\000\006\016\100\020\054\001\002\000\004" +
    "\032\101\001\002\000\004\022\102\001\002\000\004\017" +
    "\103\001\002\000\026\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\012\uffd4\014\uffd4\015\uffd4\027\uffd4\031\uffd4\001" +
    "\002\000\012\023\050\027\044\030\047\032\105\001\002" +
    "\000\004\017\110\001\002\000\006\017\107\020\054\001" +
    "\002\000\026\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\012\uffe4\014\uffe4\015\uffe4\027\uffe4\031\uffe4\001\002\000" +
    "\026\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012\uffe3" +
    "\014\uffe3\015\uffe3\027\uffe3\031\uffe3\001\002\000\010\023" +
    "\050\027\044\030\047\001\002\000\006\024\122\025\123" +
    "\001\002\000\004\022\114\001\002\000\024\004\041\005" +
    "\042\006\034\010\043\011\025\014\005\015\013\027\037" +
    "\031\011\001\002\000\026\004\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\012\ufff1\014\ufff1\015\ufff1\027\ufff1\031\ufff1" +
    "\001\002\000\026\004\uffd3\005\uffd3\006\uffd3\007\120\010" +
    "\uffd3\012\uffd3\014\uffd3\015\uffd3\027\uffd3\031\uffd3\001\002" +
    "\000\026\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\012" +
    "\ufff0\014\ufff0\015\ufff0\027\ufff0\031\ufff0\001\002\000\024" +
    "\004\041\005\042\006\034\010\043\011\025\014\005\015" +
    "\013\027\037\031\011\001\002\000\026\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\012\uffd2\014\uffd2\015\uffd2\027" +
    "\uffd2\031\uffd2\001\002\000\010\023\050\027\044\030\047" +
    "\001\002\000\010\023\050\027\044\030\047\001\002\000" +
    "\004\022\uffd0\001\002\000\004\022\uffd1\001\002\000\024" +
    "\004\uffed\005\uffed\006\uffed\010\uffed\012\uffed\014\uffed\015" +
    "\uffed\027\uffed\031\uffed\001\002\000\030\002\uffef\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\010\uffef\012\uffef\014\uffef\015" +
    "\uffef\027\uffef\031\uffef\001\002\000\006\017\132\026\104" +
    "\001\002\000\026\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\012\uffe5\014\uffe5\015\uffe5\027\uffe5\031\uffe5\001\002" +
    "\000\026\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\012" +
    "\uffe6\014\uffe6\015\uffe6\027\uffe6\031\uffe6\001\002\000\012" +
    "\014\005\015\013\022\ufff6\031\011\001\002\000\004\027" +
    "\144\001\002\000\006\016\ufff4\022\ufff4\001\002\000\004" +
    "\022\142\001\002\000\006\016\140\022\ufff5\001\002\000" +
    "\010\014\005\015\013\031\011\001\002\000\006\016\ufff3" +
    "\022\ufff3\001\002\000\004\011\025\001\002\000\012\002" +
    "\ufff8\014\ufff8\015\ufff8\031\ufff8\001\002\000\006\016\ufff2" +
    "\022\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\016\003\013\006\003\010\005\011\007\012" +
    "\006\030\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\003\011\015\012\006\030\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\023\001" +
    "\001\000\002\001\001\000\024\004\034\005\032\006\026" +
    "\017\025\020\031\021\027\022\030\023\035\024\037\001" +
    "\001\000\002\001\001\000\004\020\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\125\006\026\017\025\020\031\021\027\022\030\023\035" +
    "\024\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\044\025\045\026" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\044\025\051\026" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\054\026\050\001\001\000\002\001" +
    "\001\000\004\026\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\026\062\031\063\033\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\044\025\076\026\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\044\025\105\026\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\111\027\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\116\006\026\014\115\016" +
    "\114\017\025\020\031\021\027\022\030\023\035\024\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\116\006\026\014\120\016\114\017\025" +
    "\020\031\021\027\022\030\023\035\024\037\001\001\000" +
    "\002\001\001\000\004\026\124\001\001\000\004\026\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\133\013\134\015\136\032" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\133\013\140\001" +
    "\001\000\002\001\001\000\004\016\142\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A4Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A4Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A4Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$A4Parser$actions {
  private final A4Parser parser;

  /** Constructor */
  CUP$A4Parser$actions(A4Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$A4Parser$do_action(
    int                        CUP$A4Parser$act_num,
    java_cup.runtime.lr_parser CUP$A4Parser$parser,
    java.util.Stack            CUP$A4Parser$stack,
    int                        CUP$A4Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A4Parser$result;

      /* select the action based on the action number */
      switch (CUP$A4Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BoolExpression ::= PrimaryExpr NEQUALS PrimaryExpr 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + " != "+ e2;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(21/*BoolExpression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BoolExpression ::= PrimaryExpr EQUALS PrimaryExpr 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + " == "+ e2 ;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(21/*BoolExpression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IfStmt ::= IF LBRACK BoolExpression RBRACK Block2 ELSE Block2 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = "if " + "( "+ e1 + " ) \n" + e2 +"\n else \n" + e3;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(16/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IfStmt ::= IF LBRACK BoolExpression RBRACK Block2 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = "if " + "( "+ e1 + " ) \n" + e2;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(16/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // WriteStmt ::= WRITE LBRACK Expression COMMA QUOTEDSTRING RBRACK SEMICOLON 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		RESULT = "try {\nString outString = String.valueOf("+e1+");\nFile file = new File("+ e2 +");\nif (!file.exists()) {\nfile.createNewFile();\n}\nFileWriter fileWrite = new FileWriter(file.getAbsoluteFile());\nBufferedWriter fileOutWrite = new BufferedWriter(fileWrite);\nfileOutWrite.write(outString);\nfileOutWrite.close();\n\n} catch (IOException e) {\n}";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(17/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ReadStmt ::= READING LBRACK ID COMMA QUOTEDSTRING RBRACK SEMICOLON 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		RESULT = "try (BufferedReader newThing = new BufferedReader(new FileReader("+e2+")))\n{\nString Line;\nwhile ((Line = newThing.readLine()) != null) \n{\nSystem.out.println(Line);\n}\n}\n catch (IOException e) \n{} ";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(18/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ReturnStmt ::= RETURN Expression SEMICOLON 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = "return " + e1 + ";";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(15/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ActualParams ::= PrimaryExpr COMMA PrimaryExpr 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT =  e1 + " , "+ e2 ;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(23/*ActualParams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ActualParams ::= PrimaryExpr 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 ;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(23/*ActualParams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Ap ::= ActualParams 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(25/*Ap*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Ap ::= 
            {
              String RESULT = null;
		RESULT = "";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(25/*Ap*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PrimaryExpr ::= ID LBRACK Ap RBRACK 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = e1 +" ( "+e2+ " )";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(20/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PrimaryExpr ::= LBRACK Expression RBRACK 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = "( "+e1+ " )";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(20/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PrimaryExpr ::= ID 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(20/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PrimaryExpr ::= NUMBER 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(20/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MultiplicativeExpr ::= MultiplicativeExpr MOP PrimaryExpr 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + e2 + e3;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(5/*MultiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MultiplicativeExpr ::= PrimaryExpr 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(5/*MultiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expression ::= Expression SOP MultiplicativeExpr 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + e2 + e3;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expression ::= MultiplicativeExpr 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AssignStmt ::= ID ISE QUOTEDSTRING SEMICOLON 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = e1 + " = "+ e2 + ";";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(14/*AssignStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AssignStmt ::= ID ISE Expression SEMICOLON 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = e1 + " = "+ e2 + ";";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(14/*AssignStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LocalVarDecl ::= Type AssignStmt 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + " " + e2;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(13/*LocalVarDecl*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LocalVarDecl ::= Type ID SEMICOLON 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = e1 + " " + e2 + ";";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(13/*LocalVarDecl*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= IfStmt 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(2/*Statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= WriteStmt 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(2/*Statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= ReadStmt 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(2/*Statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= ReturnStmt 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(2/*Statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= AssignStmt 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(2/*Statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= LocalVarDecl 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(2/*Statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statements ::= Statements Statement 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + "\n" + e2;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(3/*Statements*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statements ::= Statement 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(3/*Statements*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Block ::= BEGIN Statements END 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = " \n { \n"+ e1 +"\n }";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(12/*Block*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Block2 ::= Statement 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(10/*Block2*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Block2 ::= Block 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(10/*Block2*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FormalParam ::= Type ID 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 +" " + e2;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(9/*FormalParam*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FormalParams ::= FormalParams COMMA FormalParam 
            {
              String RESULT = null;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e2 + " , " + e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(11/*FormalParams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FormalParams ::= FormalParam 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(11/*FormalParams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Fp ::= FormalParams 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(24/*Fp*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Fp ::= 
            {
              String RESULT = null;
		RESULT = "";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(24/*Fp*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Main ::= Type MAIN ID LBRACK RBRACK Block 
            {
              String RESULT = null;
		int e4left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT = "public static void main(String[] args) " +e4 ;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(22/*Main*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Method ::= Type ID LBRACK Fp RBRACK Block 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT = e1 + " " +" "+ e2 + "(" + e3 +") " +e4 ;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(8/*Method*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MethodDecl ::= Main 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(7/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MethodDecl ::= Method 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(7/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Type ::= STRING 
            {
              String RESULT = null;
		RESULT = "String";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(4/*Type*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Type ::= REAL 
            {
              String RESULT = null;
		RESULT = "double";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(4/*Type*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Type ::= INT 
            {
              String RESULT = null;
		RESULT = "int";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(4/*Type*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= Program MethodDecl 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = p + "\n" + e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(6/*Program*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= MethodDecl 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(6/*Program*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Start EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = start_val;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$A4Parser$parser.done_parsing();
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Start ::= Program 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT = "import java.io.*;\npublic class A4 {\n public static T (T input, T test)\n{\nif(test instanceof int)\n{\nreturn 	Integer.Parseint(input);\n}\nelse if(test instanceof double)\n{\n\nreturn Double.ParseDouble(input);\n}\nreturn input;\n}"+p+ "\n}"; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(1/*Start*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

